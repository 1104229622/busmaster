<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" []>
<topic id="test_automation" xml:lang="en-us">
  <title>Test Automation</title>
  <prolog>
    <author>Ratnadip Choudhury</author>
    <copyright>
      <copyryear year="2011"/>
      <copyrholder>ROBERT BOSCH ENGINEERING AND BUSINESS SOLUTIONS LIMITED</copyrholder>
    </copyright>
    <metadata>
      <keywords>
        <indexterm>Test Automation</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>Introduction to Test Automation:</p>
    <p>Test Automation is a process of optimizing the effort in testing where the user only needs to define the test cases (rather than writing codes in Node programming). The test cases may be taken directly as input parameters for the execution of a testing session carried out by Test Automation module of BUSMASTER. This means user can expend more time for writing proper test cases rather than implementation issues of the same.</p>
    <p>To be noted - this is neither a substitute nor a variant of node programming. In the former the actions are predetermined; it is only the parameter set (both in terms of signal value and time axis) that varies, whereas in the later the node behavior / logic are programmed. So the Test Automation is an extension of the tool to simplify the process of carrying out tests of a genre and generating the report.</p>
    <p>A schematic diagram of Test Automation scenario is presented below:</p>
    <image href="../images/TestAutomation.jpg" placement="break"/>
    <p>Test Automation in BUSMASTER can be divided into three Modules As,<ul>
        <li>Test Setup File</li>
        <li>Test Setup Editor</li>
        <li>Test Executor</li>
      </ul></p>
    <p>Test Setup File:</p>
    <p>Description:</p>
    <p>A test setup is a XML file which contains the instruction set of the various test cases. The contents Test Setup File can be divided as follows,</p>
    <p>Test setup := &lt;Header&gt; + &lt;Test case list&gt;</p>
    <p>Test case list := {test case 1, test case 2, ..., test case N}, where N &gt;= 1</p>
    <p>Test case := {test step 1, test step 2, ..., test step N}, N &gt;= 2</p>
    <p>Test step := transmission / wait / replay / verification operation</p>
    <p>Explanation:</p>
    <p>1. Test Setup: Test Setup file contains two sections Header and Test Case List</p>
    <p>2. Header: Header contains the basic information regarding to the Test setup file, Like versions, Report File path, Database file path, ECU name, Tester Information etc. User has to provide the information. Some Values are optional and some are compulsory. Database path is a compulsory value. Check table 1 for the required and optional fields.</p>
    <p>3. Test Case List: Test Case List contains a collection of test cases. User has to create the Test cases.</p>
    <p>4. Test case: A test case is the collection of test steps such as send, wait, replay, verify.</p>
    <p>5. Send: This is a collection of send_messages. This test step instructs to send the specified messages.</p>
    <p>6. send_message: This provides the details of message to be send. User has to initialize the messages and its signals. The default value assumed to the signals is 0. The message value my be given in engineering value mode or in raw value mode.</p>
    <p>7. Wait: Wait node instruct to wait certain period of time, expressed in terms of milliseconds.</p>
    <p>8. Replay: Replay node instructs to replay BUSMASTER log file.</p>
    <p>9. Verify: This is a collection of verify_messages. This test step instructs to verify the specified messages (both Rx and Tx).</p>
    <p>10. VerifyResponse: This Test step verifies the specified message responses (Rx Messages) with in specified time. So this step requires a time interval.</p>
    <p>11. Verify_message: This provides the details of message to be verify. The user needs to formulate the validation condition. In the formula current signal value shall be denoted by &apos;x&apos; following the algebraic notation. The presently supported logical operators are the eight: ==, &gt;, &lt;, &gt;=, &lt;=,!= , ||, and &amp;&amp;. By combining them suitably the following validation operations may be carried out:</p>
    <p>A. Range of values; e.g., (x &lt;= 10) &amp;&amp; (x &gt;= 50)</p>
    <p>B. Set of discrete values; e.g., (x == 10) || (x == 20) || (x == 50)</p>
    <p>C. Formulation of any other validation procedure.</p>
    <p>Here is a sample test file: <xref href="https://github.com/rbei-etas/busmaster/tree/master/Documents/4%20Help/files/SampleTestSetupFile.xml" scope="external">SampleTestSetupFile.xml</xref>.</p>
    <p>The table below contains a concise description of each of the section details and error handling procedure in case of absence of any information.</p>
    <table>
      <tgroup cols="4">
        <thead>
          <row>
            <entry>Section (tag)</entry>
            <entry>Description</entry>
            <entry>Assumed value if absent</entry>
            <entry>Error condition if absent</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Test setup (testsetup)</entry>
            <entry>The root node. Accompanied by its title (title) and version information (version)</entry>
            <entry>-</entry>
            <entry>Fatal</entry>
          </row>
          <row>
            <entry>Database file (database)</entry>
            <entry>Database file</entry>
            <entry/>
            <entry>Fatal</entry>
          </row>
          <row>
            <entry>Version (version)</entry>
            <entry>Version information of the test setup</entry>
            <entry>1.0</entry>
            <entry>No error</entry>
          </row>
          <row>
            <entry>Module Name (module name)</entry>
            <entry>Module focused on for the testing</entry>
            <entry>-</entry>
            <entry>No error</entry>
          </row>
          <row>
            <entry>Engineer’s name</entry>
            <entry>Test engineer’s name</entry>
            <entry>-</entry>
            <entry>No error</entry>
          </row>
          <row>
            <entry>Engineer’s role</entry>
            <entry>And role / designation</entry>
            <entry>-</entry>
            <entry>No error</entry>
          </row>
          <row>
            <entry>Report file path (path)</entry>
            <entry>Particular of the report file to be generated.</entry>
            <entry>Current working directory with the name same as the test setup.</entry>
            <entry>Error</entry>
          </row>
          <row>
            <entry>Report file format (format)</entry>
            <entry>Format of the report file. Can be one of TXT and HTM</entry>
            <entry>TXT</entry>
            <entry>Warning</entry>
          </row>
          <row>
            <entry>Report file time mode (timemode)</entry>
            <entry>Time mode. Can be one of SYS (system), REL (relative) and ABS (absolute)</entry>
            <entry>SYS</entry>
            <entry>Warning</entry>
          </row>
          <row>
            <entry>Bus type (bustype)</entry>
            <entry>Bus type. At present can be only CAN</entry>
            <entry>CAN</entry>
            <entry>Fatal</entry>
          </row>
          <row>
            <entry>Test case list (list_of_test_cases)</entry>
            <entry>Collection of test cases.</entry>
            <entry>Nil</entry>
            <entry>Error. There must be at least one entry.</entry>
          </row>
          <row>
            <entry>Test case (testcase)</entry>
            <entry>Collection of test steps. A test case contains identifier, title and exception handler. The last one instructs if in case of failure to continue or exit.</entry>
            <entry>Nil</entry>
            <entry>Error. There must be at least an entry.</entry>
          </row>
          <row>
            <entry>Test case title (title)</entry>
            <entry>Test case title</entry>
            <entry>-</entry>
            <entry>No error</entry>
          </row>
          <row>
            <entry>Test case exception handler (exp_handler)</entry>
            <entry>Instructs if in case of failure the testing process exists or continues. Can be one of continue or exit</entry>
            <entry>continue</entry>
            <entry>Warning</entry>
          </row>
          <row>
            <entry>Transmission (send)</entry>
            <entry>Collection of the messages to be transmitted.</entry>
            <entry>-</entry>
            <entry>No error</entry>
          </row>
          <row>
            <entry>Transmittion message details (send_message)</entry>
            <entry>Details of the message list to be transmitted.</entry>
            <entry>Nil</entry>
            <entry>Warning</entry>
          </row>
          <row>
            <entry>Send message id (identifier)</entry>
            <entry>Identifier of the message.</entry>
            <entry>-</entry>
            <entry>Error. The test case shall be dropped.</entry>
          </row>
          <row>
            <entry>Send message unit (unit)</entry>
            <entry>Unit type of the signals. Can be either raw (raw) or engineering (engg)</entry>
            <entry>Engineering value</entry>
            <entry>Warning</entry>
          </row>
          <row>
            <entry>Signal (signal)</entry>
            <entry>Details the signal with its name (name) and value.</entry>
            <entry>-</entry>
            <entry>Error. The test case shall be dropped.</entry>
          </row>
          <row>
            <entry>Verification (verify)</entry>
            <entry>Verification instruction set. Contains a collection of verification messages.</entry>
            <entry>Nil</entry>
            <entry>Error. A test case must have a validation routine. Test case shall be dropped.</entry>
          </row>
          <row>
            <entry>Failure classification (failure)</entry>
            <entry>For a verification procedure – how to classify validation failure. Can be one of warning, error, fatal</entry>
            <entry>Error</entry>
            <entry>Warning.</entry>
          </row>
          <row>
            <entry>Verify message details (verify_message)</entry>
            <entry>Details of the message list to be verified / validated.</entry>
            <entry>Nil</entry>
            <entry>Error. The test case shall be dropped.</entry>
          </row>
          <row>
            <entry>Verify message signal detail (signal)</entry>
            <entry>Details of a signal under a verify message node. The attribute required is the signal’s name (name). The node value shall be a string with formulation of the condition. This shall follow the syntax mentioned in table 2.</entry>
            <entry>Nil</entry>
            <entry>Error. The test case shall be dropped.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>So, As explained above the test setup file has to write in xml format. So user has to know the syntax of xml and the test set up file. But To simplify this process BUSMASTER provides an editor called Test Setup Editor.</p>
    <p>1.2 Test Setup Editor:</p>
    <p>Test setup Editor is useful to create and edit a test setup file. Here is the list of different services rendered by the editor.</p>
    <p>1.2.1 Features provided by test setup editor:</p>
    <ul>
      <li>Create a New Test setup file.</li>
      <li>Save a Test Setup file.</li>
      <li>Load an existing test setup file.</li>
      <li>Create, edit and update a test case.</li>
      <li>Define a test case by adding its sub nodes like send, wait, verify, and replay.</li>
      <li>Reposition a test case.</li>
      <li>Delete a test case.</li>
      <li>Create, edit, and update a new test case node.</li>
      <li>Adding, deleting a send message to send node.</li>
      <li>Initialization of a send message node.</li>
      <li>Adding and deleting a verify message node to verify node</li>
      <li>Create a validation procedure for each signal in the verify message.</li>
      <li>Create a wait node.</li>
      <li>Repositioning a test case sub node.</li>
      <li>Copy, Cut, paste operation on Test case and its sub nodes.</li>
      <li>Validate the test setup file. </li>
    </ul>
    <p>1.2.2 Invoking Test setup editor:</p>
    <p>To open the test setup editor, In BUSMASTER click on menu Item, &quot;Functions-&gt;Test Automation-&gt;Editor&quot;.</p>
    <p>The First look of Automation Editor will be as shown in 1.2.2. To make things easier the BUSMASTER Menu will be replaced with the Test Automation Editor.</p>
    <image href="../images/TestSuiteEditor.bmp" placement="break"/>
    <p>Master Pane: Master pane or Right pane can be used to add or update the test cases.</p>
    <p>Property Pane: User can use the Property pane or Left pane to update the details of a Test case or its sub nodes.</p>
    <ul>
      <li>It contains a Table with two columns &quot;category&quot; and &quot;value&quot;. The value in &quot;category&quot; field can not be changed and it’s like a question. To update the value in any row of “value” column double click on the cell item. An edit box or a list control will appear according to the context.</li>
      <li>Also the Pane contains two buttons &quot;Confirm&quot; and &quot;Cancel&quot;. Confirm Button can be used to save the current changes made to the node. Note that these changes will not be saved to file. For saving into a file select file-&gt;save (see section 1.2.3 for menus). Cancel button Will cancel all the changes made and display the previously saved data.</li>
    </ul>
    <p>Help Window: Help window will provide Help on every node. Click on any item on right pane to get the details of that node.</p>
    <p>1.2.3 Test Setup Editor Menu:</p>
    <p>The functionalities, provided by the Test Setup editor, are grouped under the Test setup editor Menu. This Menu will be shown in BUSMASTER when the editor is in active mode or user clicked on the Editor. Below figure 1.2.3 will show the main menu of the editor.</p>
    <p><menucascade>
        <uicontrol>File</uicontrol>
      </menucascade>: File Menu Contains All most all the functionalities provided by the Editor. It contains the following sub menus.</p>
    <ul>
      <li><menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>New</uicontrol>
        </menucascade>: Use to create a New Test Setup file. &quot;Ctrl + N&quot; is the keyboard short cut.</li>
      <li><menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>Open</uicontrol>
        </menucascade>: use to Open an existing test setup file. &quot;Ctrl + O&quot; is the keyboard short cut.</li>
      <li><menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>Close</uicontrol>
        </menucascade>: Closes the current file.</li>
      <li><menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>Save</uicontrol>
        </menucascade>: Saves the current changes to the file. &quot;Ctrl + S&quot; is the keyboard short cut.</li>
      <li><menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>SaveAs</uicontrol>
        </menucascade>: Saves the current data into another file.</li>
      <li><menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>Validate</uicontrol>
        </menucascade>: Validates the Current file According to the table 1.1.</li>
      <li><menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>Exit</uicontrol>
        </menucascade>: Closes the Editor.</li>
    </ul>
    <p><menucascade>
        <uicontrol>Edit</uicontrol>
      </menucascade>: Edit menu will provide the operations such as Cut, Copy, and Paste.</p>
    <ul>
      <li><menucascade>
          <uicontrol>Edit</uicontrol>
          <uicontrol>Copy</uicontrol>
        </menucascade>: Any item on the right pane can be copied using this menu. &quot;Ctrl + C&quot; is the keyboard short cut.</li>
      <li><menucascade>
          <uicontrol>Edit</uicontrol>
          <uicontrol>Cut</uicontrol>
        </menucascade>: Using this menu Any item on the right pane can be deleted by copying it. &quot;Ctrl + X&quot; is the keyboard short cut.</li>
      <li><menucascade>
          <uicontrol>Edit</uicontrol>
          <uicontrol>Paste</uicontrol>
        </menucascade>: The Copied item can be inserted under any parent item by selecting the parent item and this menu. For example the copied &quot;send_message&quot; can be inserted in any send node of any test case.</li>
    </ul>
    <p><menucascade>
        <uicontrol>Display</uicontrol>
      </menucascade>: used to customize the GUI.</p>
    <p><menucascade>
        <uicontrol>Help</uicontrol>
      </menucascade>: Help provide the version details about the editor and also opens this help file.</p>
    <p>1.2.4. Using Editor:</p>
    <p>1.2.4.1. Creating a new Test Setup File: Select File-&gt;New Menu. A File browser will be displayed. Select a Required folder and enter the file name. Click on OK. The Editor will create a New Test setup file and a new Test setup with some initial values.</p>
    <p>1.2.4.2. Updating Test Setup: Initially the name of Test Setup will be &lt;New Test SetUp&gt; displayed in right pane. Click on this item (test setup node) and update its details such as test setup name, Description, version, Bus type, Module name, Engineer Info, Report file path and database in left pane. The database path is very important.</p>
    <p>1.2.4.3. Creating a Test Case: Right Click on the Test setup node on right pane. A pop up menu will appear click on “New Test Case”. A new Test Case with Initial name “Untitled TestCase” will be created.</p>
    <p>1.2.4.4. Updating a Test Case: Click on Required Test Case Node. The left pane will show the details of test case and you can edit the details and click confirm button.</p>
    <p>1.2.4.5. Deleting a Test case: Right Click on Required Test Case Node. A pop up menu will displayed. Click on delete item. The test case will be deleted from the test setup.</p>
    <p>1.2.4.6. Adding a new test sequence: Right Click on Required Test Case Node. A pop up menu will be displayed. Click on New menu and select the required node.</p>
    <p>1.2.4.7. Updating a test sequence: Click on any test sequence item. And edit its detail in left pane and click on confirm button.</p>
    <p>1.2.4.8. Deleting a test sequence: Right click on any test sequence item. A pop up menu will appear. Click on Delete item to delete the node.</p>
    <p>1.2.4.9. Adding/Deleting the message:</p>
    <p>To add the messages in send, verify etc nodes, Click on the required send node. Double click on the [Add message] cell on right side. If a database is added in the Test setup node, A list box containing the messages will appear. Select a message to add in list. After adding a new row with [Add Message] will be added in list box in order to add another message.</p>
    <p>To delete a Message double click on that message. Select [Delete Message] in list in order to delete the message.</p>
    <p>1.3 Test Suite Executor:</p>
    <p>Test suite Executor is used to Execute one or more Test setup files sequentially. The result of Execution will be Logged into the result file specified in Test setup file. The collection of test setup files are called test suite. Here is the list of different services rendered by the Editor.</p>
    <p>1.3.1 Features provided by test suite Executor:</p>
    <ul>
      <li>Adding a Test setup files.</li>
      <li>Delete a Test setup file from the execution.</li>
      <li>Select/Deselect a test setup file for execution.</li>
      <li>Select/Deselect a test case for execution.</li>
      <li>Execute the test suite.</li>
    </ul>
    <p>1.3.2 Invoking Test suite Executor:</p>
    <p>To open the test suite editor, In BUSMASTER click on menu Item, “Functions-&gt;Test Automation-&gt;Executor.”</p>
    <p>The first look of Test suite is shown in figure 1.3.2</p>
    <image href="../images/TestSuiteExecutor.bmp" placement="break"/>
    <p>Figure 1.3.2</p>
    <p>Master pane: Using This pane we can add Test setup files and select and deselect a test case. All the functionalities described in section 1.3.1 can be performed using this pane.</p>
    <p>Result pane: Result pane will display the current execution status of the test suite.</p>
    <p>1.3.3 Using Executor:</p>
    <p>1.3.3.1: Naming a test suite: Double click on the top most tree node (Test suite node) on master pane. A edit box will appear, give a suitable name and press enter.</p>
    <p>1.3.3.2: Adding a Test Suite: Right click on the Test suite node. A pop up menu will displayed. Click on “Add” Menu. A file browser will appear where you can select a test setup file. If the file is correct one the executor will add it in test suite and Displays all its test cases.</p>
    <p>1.3.3.3: Select/Deselect a Test suite: To select or deselect test setup for execution click on the check box located near the Test setup file.</p>
    <p>1.3.3.4: Delete a Test setup file: Right click on the required test setup file and select &quot;delete&quot; in the pop up menu.</p>
    <p>1.3.3.5: Select/Deselect a Test case: Click on the check box of particular test case to enable or disable it for execution. Note that if the test setup is deselected from the execution then all its test cases are nor executed.</p>
    <p>1.3.3.6: Execute Test suite: Right click on the test suite node and select &quot;Execute&quot; in the pop up menu. Each selected test case is executed and the summary will be displayed in Result view.</p>
  </body>
</topic>
