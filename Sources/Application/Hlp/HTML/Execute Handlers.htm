<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Execute  Handlers</TITLE>
</HEAD>

<BODY BGCOLOR="#ffffff" TEXT="#000000">
<OBJECT type=application/x-oleobject 
classid=clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e><PARAM NAME="Keyword" VALUE="Execute  Handlers"></OBJECT>

<H3>
<TABLE style="WIDTH: 722px" cellSpacing=2 cellPadding=5 width=722 
bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD align=left bgColor=#ccccff>
      <P align=center><FONT face=Arial color=red size=5 
      ><STRONG>Execute 
      Handlers</STRONG></FONT></P></TD></TR>
  <TR>
    <TD align=left bgColor=#eeeeff><FONT face=Arial 
      size=2>
      <P class=MsoNormal dir=ltr style="MARGIN: 0in 0in 0pt" 
      ><SPAN style="FONT-FAMILY: Arial" 
      ><BR>There 
      are five types of function handlers, which are executed on reception of 
      corresponding event </P>
      <UL>
        <LI><STRONG>Message Handlers</STRONG>
        <LI><STRONG>Timer Handlers</STRONG>
        <LI><STRONG>Key Handlers</STRONG>
        <LI><STRONG>Error Handlers</STRONG>
        <LI><STRONG>Dll Handlers</STRONG></LI></UL>
      <P class=MsoNormal dir=ltr style="MARGIN: 0in 0in 0pt" 
      >
      <OBJECT type=application/x-oleobject 
      classid=clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e><PARAM NAME="Keyword" VALUE="Message Handlers"></OBJECT></P>
      <H4><A name=message_handlers></A><FONT size=2>Message Handlers</FONT></H4>
      <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Message 
      Handlers are functions written by you to be executed on reception of a 
      specific message, range of messages or all received messages. You can 
      write message handlers using message names defined in active database, the 
      message ID, for a range of messages based on message ID or for all 
      received messages. See section <FONT color=blue>Function Editor</FONT> for 
      further details. Before enabling message handler, the corresponding DLL 
      should be loaded. Select <STRONG>User Program</STRONG>&nbsp;<IMG style="LEFT: 396px; TOP: 275px" alt="" 
      src="images\arrow.jpg" 
      border=0>&nbsp;<B>Execute </B><IMG alt="" 
      src="images\arrow.jpg" 
      border=0><STRONG>&nbsp;All Message Handler(s) 
      </STRONG>to enable all the message handler(s) of all the DLLs under the 
      simulated system(s). On reception of a message corresponding message handler will 
      be invoked. You can also execute all the message handlers of&nbsp;all 
      the DLLs under the simulated system(s)&nbsp;using tool bar button shown in figure 
      below.</P>
      <P align=center><IMG alt="" src="images\messagehandler.bmp" 
      border=0></P>
      <P align=left>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;All 
      the&nbsp;message handler(s)&nbsp;under the simulated system(s) can also 
      be&nbsp;executed by right clicking on any simulated system and 
      selecting&nbsp;<STRONG>Enable All Message Handlers&nbsp;</STRONG>in 
      simulated system window <STRONG>Pane 1</STRONG>. The message handler(s) 
      under the node can be executed by selecting the Message handlers in 
      <STRONG>Handler Details List</STRONG> and clicking <STRONG>Enable 
      Handler</STRONG> in the simulated system window <STRONG>Pane 2</STRONG> 
      .</P>
      <P class=MsoNormal dir=ltr style="MARGIN: 0in 0in 0pt" 
      >
      <OBJECT id=OBJECT4 type=application/x-oleobject 
      classid=clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e><PARAM NAME="Keyword" VALUE="Timer Handlers"></OBJECT></P>
      <H4><A name=timer_handlers></A><FONT size=2>Timer Handlers</FONT></H4>
      <P>     
            The timer handler functions are those 
      function which will be executed on elapse of selected time interval. Please 
      see section <A href="Function Editor.htm">Function Editor</A>   
      for further details. After&nbsp;the DLLs are&nbsp;loaded, timer handlers can be invoked using 
      <B>User Program </B><IMG alt="" 
      src="images\arrow.jpg" 
      border=0>&nbsp;<B>Execute </B><IMG alt="" 
      src="images\arrow.jpg" 
      border=0>&nbsp;<STRONG>All Timer 
      Handler(s)</STRONG>. You can also press tool bar button 
      shown in figure below.</P>
      <P align=center><IMG alt="" src="images\timer.bmp" 
      border=0></P>
      <P> A dialog box will be 
      displayed listing all timer handlers defined. User can select timer 
      handler. Selected timer handler can be configured as Mono Shot or Cyclic 
      by Selecting/Deselecting the respective check boxes. The default time 
      value associated with the timer will be displayed. User can change this to 
      a new time value.</P>
      <P align=center><IMG alt="" src="images\Timer_Dialog.bmp"></P>
      <P> The timers are activated on 
      selecting <STRONG>OK</STRONG> button or <STRONG>Apply</STRONG> button in 
      dialog box. Properties of running timer can not be changed with out 
      stopping the timer. Monoshot timer functions are invoked only once at 
      elapse of the time interval. Cyclic timer functions are invoked repeatedly 
      on elapse of specified time until it is manually stopped. Cyclic timers 
      can be stopped by deselecting the timer function after invoking the dialog 
      box again.</P>
      <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; All the&nbsp;timer 
      handler(s)&nbsp;under the simulated system(s) can also be&nbsp;executed by 
      right clicking on any simulated system and selecting&nbsp;<STRONG>Enable 
      All Timet Handlers&nbsp;</STRONG>in simulated system window <STRONG>Pane 
      1</STRONG>. The timer handler(s) under the node can be executed by 
      selecting the Timer handlers in <STRONG>Handler Details List</STRONG> and 
      clicking <STRONG>Enable Handler</STRONG> in the simulated system window 
      <STRONG>Pane 2</STRONG> .</P>
      <P class=MsoNormal dir=ltr style="MARGIN: 0in 0in 0pt" 
      >
      <OBJECT id=OBJECT1 type=application/x-oleobject 
      classid=clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e><PARAM NAME="Keyword" VALUE="Key Handlers"></OBJECT></P>
      <H4><A name=key_handlers></A><FONT size=2>Key Handlers</FONT></H4>
      <P> BUSMASTER supports a maximum of 
      62 key handlers (Alphanumeric keys – A to Z, a to z, 0 to 9). Additionally 
      a single key handler for handling all the 62 key handlers is supported, 
      for this ‘*’ has to be selected.</P>
      <P> The key handler function can 
      be executed by pressing the corresponding key for which the key handler is 
      written. Pressing the toolbar button shown in the figure below will enable 
      Key handlers. Pressing the same tool bar again will disable key handlers. 
      Please see section <A href="Function Editor.htm">Function Editor</A> for further 
      details.</P>
      <P align=center><IMG alt="" src="images\keyhandlertoolbar.bmp" 
      border=0></P>
      <P align=left>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;All 
      the&nbsp;key handler(s)&nbsp;under the simulated system(s) can also 
      be&nbsp;executed by right clicking on any simulated system and 
      selecting&nbsp;<STRONG>Enable All Key Handlers&nbsp;</STRONG>in simulated 
      system window <STRONG>Pane 1</STRONG>. The key handler(s) under the node 
      can be executed by selecting the Key handlers in <STRONG>Handler Details 
      List</STRONG> and clicking <STRONG>Enable Handler</STRONG> in the 
      simulated system window <STRONG>Pane 2</STRONG> .</P>
      <P class=MsoNormal dir=ltr style="MARGIN: 0in 0in 0pt">
      <OBJECT id=OBJECT2 type=application/x-oleobject 
      classid=clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e><PARAM NAME="Keyword" VALUE="Error Handlers"></OBJECT></P>
      <H1><A name=error_handlers></A><FONT size=2>Error Handlers</FONT></H1>
      <P> User can write functions to 
      handle following types of error or error state of the controller
      <UL>
        <LI><STRONG>Error frame Handler</STRONG> – This function gets activated 
        when a error frame is received
        <LI><STRONG>Bus Off Handler</STRONG> – gets activated when the 
        controller enters the bus off state
        <LI><STRONG>Active Error Handler</STRONG>&nbsp;– gets activated when the 
        controller enters the error active state.
        <LI><STRONG>Passive Error Handler</STRONG> – gets activated when the 
        controller enters error passive state.
        <LI><STRONG>Warning Limit Handler</STRONG> – gets activated when the 
        controller enters crosses the warning limit that has been set. </LI></UL>
      <P> These handlers can be added 
      in the code by right clicking on the item <STRONG>Error Handlers</STRONG> 
      and selecting <STRONG>Add</STRONG> from the pop up menu. This brings up a 
      dialog box as shown below, listing the all the supported error handlers, 
      one can select the required handlers and on clicking <STRONG>OK</STRONG> 
      button the framework for the function handler gets added in the .c 
      file.</P>
      <P></P>
      <P align=center><IMG alt="" src="images\errhandlerdlg.bmp" 
      border=0></P>
      <P> To delete error handlers 
      select Error Handlers and right click. Select Delete from popup menu. 
      Select handlers that are to be deleted. Selecting Ok will delete checked 
      handlers.</P>
      <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; All the&nbsp;error 
      handler(s)&nbsp;under the simulated system(s) can also be&nbsp;executed by 
      right clicking on any simulated system and selecting&nbsp;<STRONG>Enable 
      All Error Handlers&nbsp;</STRONG>in simulated system window <STRONG>Pane 
      1</STRONG>. The error handler(s) under the node can be executed by 
      selecting the Error handlers in <STRONG>Handler Details List</STRONG> and 
      clicking <STRONG>Enable Handler</STRONG> in the simulated system window 
      <STRONG>Pane 2</STRONG> .</P>
      <P class=MsoNormal dir=ltr style="MARGIN: 0in 0in 0pt" 
      >
      <OBJECT id=OBJECT3 type=application/x-oleobject 
      classid=clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e><PARAM NAME="Keyword" VALUE="Dll Handlers"></OBJECT></P>
      <P><B><A name=dll_handlers></A>Dll Handlers</B> </P>
      <P> User can write functions to 
      handle initialization and de-initialization at the time of loading and 
      unloading the user program. The two events supported are
      <UL>
        <LI><STRONG>Load</STRONG> - When the dll is loaded
        <LI><STRONG>UnLoad</STRONG> - When the dll is unloaded.</LI></UL>
      <P> <FONT size=2>Adding &amp; 
      deleting the Dll handlers is same as that of error 
      handlers.</FONT></SPAN></FONT></P></TD></TR></TBODY></TABLE>  </H3><A NAME="execute_handlers"></A>

<P>&nbsp;</P>

</BODY>
</HTML>
